@using CIS.Domain.Customers.Models
@using CIS.Domain.Customers
@using CIS.Library.Customers.Models
@typeparam TGridItem
@attribute [CascadingTypeParameter(nameof(TGridItem))]

<FluentLayout>
    <FluentToolbar>
        <FluentButton IconStart="@(new Icons.Filled.Size24.Edit())" Appearance="@(Appearance.Accent)" BackgroundColor="yellow" />
        <FluentButton IconStart="@(new Icons.Filled.Size24.Delete())" Appearance="Appearance.Accent" BackgroundColor="red" />
    </FluentToolbar>

    <FluentDataGrid Class="overflow-y-auto"
                    TGridItem=TGridItem
                    Items="_displayData"
                    GenerateHeader="GenerateHeaderOption.Sticky"
                    OnRowFocus="(s)=>ItemSelected_Changed((TGridItem)s.Data)"
                    ItemSize="23"
                    Virtualize=true
                    GridTemplateColumns="@(GridTemplateColumns ?? string.Empty)"
                    ResizableColumns=true>


        <ChildContent>
            @Columns
        </ChildContent>

    </FluentDataGrid>
</FluentLayout>

@code{
    [Parameter]
    public List<TGridItem> Items { get; set; }

    [Parameter]
    public TGridItem ItemSelected { get; set; }

    [Parameter]
    public EventCallback<TGridItem> ItemSelectedChanged { get; set; }

    [Parameter]
    public RenderFragment Columns { get; set; }

    [Parameter]
    public Func<string, TGridItem, bool> Filter { get; set; }

    /// <summary>
    /// Sets column width "1fr 2fr 1fr" etc
    /// </summary>
    [Parameter]
    public string GridTemplateColumns { get; set; }


    private IQueryable<TGridItem> _displayData;


    private async void ItemSelected_Changed(TGridItem itemSelected)
    {
        var test = new FluentDataGrid<CustomerView>();
        ItemSelected = itemSelected;
        await ItemSelectedChanged.InvokeAsync(ItemSelected);
    }

    private void SearchChanged(string input)
    {
        input = input.ToLower();
        _displayData = Items.Where(s => Filter.Invoke(input, s)).AsQueryable();
    }

}
