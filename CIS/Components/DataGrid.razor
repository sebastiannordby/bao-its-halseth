@using CIS.Domain.Customers.Models
@using CIS.Domain.Customers
@using CIS.Library.Customers.Models
@typeparam TItem
@attribute [CascadingTypeParameter(nameof(TItem))]

<div class="flex flex-col gap-2 h-full" >
    <div class="flex gap-2">
        <RadzenButton Icon="edit"   />
        <RadzenButton Icon="delete"  />
        @Toolbar
        <RadzenTextBox class="ml-auto" @bind-Value="_filter" @bind-Value:event="OnInput" @onchange=FilterChanged/>
    </div>

    <RadzenDataGrid 
        TItem="TItem"
        Data="Items"
        Columns="Columns"
        FilterMode="FilterMode.Advanced"
        AllowFiltering="true"
        AllowPaging="true"
        AllowSorting="true"
        AllowMultiColumnSorting="true"
        AllowColumnPicking="true"
        AllowGrouping="true"
        Style="height: 100%">
    </RadzenDataGrid>
</div>

@code{

    [Parameter]
    public List<TItem> Items { get; set; }

    [Parameter]
    public TItem ItemSelected { get; set; }

    [Parameter]
    public EventCallback<TItem> ItemSelectedChanged { get; set; }

    [Parameter]
    public RenderFragment Columns { get; set; }

    [Parameter]
    public RenderFragment Toolbar { get; set; }

    [Parameter]
    public Func<string, TItem, bool> Filter { get; set; }

    /// <summary>
    /// Sets column width "1fr 2fr 1fr" etc
    /// </summary>
    [Parameter]
    public string GridTemplateColumns { get; set; }


    private string _filter;

    private IQueryable<TItem> _displayData;

    private async void ItemSelected_Changed(TItem itemSelected)
    {
        ItemSelected = itemSelected;
        await ItemSelectedChanged.InvokeAsync(ItemSelected);
    }

    private void FilterChanged()
    {
        if (string.IsNullOrEmpty(_filter)) return;

        var filter = _filter.ToLower();
        _displayData = Items.Where(s => Filter.Invoke(filter, s)).AsQueryable();
    }
}
