@using CIS.Domain.Customers.Models
@using CIS.Domain.Customers

<MudLayout Class="h-full">
    <MudDataGrid 
        ColumnResizeMode=ResizeMode.Column 
        FixedHeader=true 
        Items="_displayData"
        RowClass="[&>td]:!text-[10px] [&>td]:!p-1"
        
        T="Customer" Dense=true Bordered=true >
        <ToolBarContent>
            <MudSpacer/>
            <MudTextField Placeholder="Søk..."/>
        </ToolBarContent>
        <Columns>
            <PropertyColumn CellStyle="max-width:20px" Resizable="true" Property="x=>x.Number" Title="#"/>
            <PropertyColumn Resizable="true" CellClass="whitespace-nowrap" Property="x=>x.Name"  />
            <PropertyColumn Resizable="true" Property="x=>x.ContactPersonName"/>
            <PropertyColumn Resizable="true" Property="x=>x.ContactPersonEmailAddress"/>
            <PropertyColumn Resizable="true" Property="x=>x.ContactPersonPhoneNumber"/>
            <TemplateColumn  Resizable="true" Context="item"  >
                <CellTemplate >
                    <MudCheckBox Value="item.Item.IsActive" ReadOnly=true/>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>

</MudLayout>

@code {
    [Parameter]
    public List<Customer> Data { get;set; }

    [Parameter]
    public Customer ItemSelected { get; set; }

    [Parameter] 
    public EventCallback<Customer> ItemSelectedChanged { get; set; }

    private List<Customer> _displayData;
    public IList<Customer> _itemSelected { get; set; }

    protected override async void OnInitialized()
    {
        Data = new();

        for (int i = 0; i < 50; i++)
        {
            var customer = await Customer.Initialize(
                number: i,
                name: "Narvesen Oslo S " + 1,
                contactPersonName: "Jon Doe " + i,
                contactPersonEmailAddress: "jondoe" + i + "@gmail.com",
                contactPersonPhoneNumber: "" + i,
                customerGroupNumber: null,
                isActive: true
            );

            Data.Add(customer);
        }

        _displayData = Data;
    }

    private async void ItemSelected_Changed(IList<Customer> itemSelected)
    {
        _itemSelected = itemSelected;
        ItemSelected = itemSelected.FirstOrDefault();
        await ItemSelectedChanged.InvokeAsync(ItemSelected);
    }

    private void SearchChanged(string input)
    {
        input = input.ToLower();
        _displayData = Data.Where(s => s.Name.ToLower().Contains(input)
        || s.Number.ToString().Contains(input)
        || s.ContactPersonName.ToLower().Contains(input)
        || s.ContactPersonEmailAddress.ToLower().Contains(input)
        || s.ContactPersonPhoneNumber.ToLower().Contains(input)).ToList();
    }
}
