@page "/weather"
@attribute [StreamRendering]

<PageTitle>Weather</PageTitle>

<RadzenText>Weather</RadzenText>

<RadzenText>This component demonstrates showing data.</RadzenText>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>

                <th>
                    <RadzenText>
                        Date
                    </RadzenText>
                </th>
                <th>
                    <RadzenText>
                        Temp. (C)
                    </RadzenText>
                </th>

                <th>
                    <RadzenText>
                        Temp. (F)
                    </RadzenText>
                </th>
                <th>
                    <RadzenText>
                        Summary
                    </RadzenText>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>
                        <RadzenText>
                            @forecast.Date.ToShortDateString()
                        </RadzenText>
                    </td>
                    <td>
                        <RadzenText>
                            @forecast.TemperatureC
                        </RadzenText>
                    </td>
                    
                    <td>
                        <RadzenText>
                            @forecast.TemperatureF
                        </RadzenText>
                    </td>

                    <td>
                        <RadzenText>
                            @forecast.Summary
                        </RadzenText>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
