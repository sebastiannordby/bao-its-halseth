// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using CIS.Application.Legacy;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace CIS.Application.Legacy
{
    public partial class SWNDistroContext
    {
        private ISWNDistroProcedures _procedures;

        public virtual ISWNDistroProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new SWNDistroProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public ISWNDistroProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<beregnetLagerResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<beregnlagerResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<FilExport_Distro_2020Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<FilExport_Distro_2020_EnkeltOrdreResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<hentButikkOrdreResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<hentVaretellingsDifferResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ImportLagerResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ImportPakkseddelResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ImportSalgstallResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<lagerberegningResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<LagerstatusResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<LeggtilNyOrdreResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<LesInnOrdrefilerFraButikkResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<oppdaterLagerdataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ordreFordelingÅpningsordreResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ordreFraNettButikkResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ordreFraNettRCResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ordreFraNettRC_NYResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<proc_restordreResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<proc_restordre_linjeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<proc_vareinfoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<rc_salgstallResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ReturImportFiler_VTFILER_RCResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SalgsprognoseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<salgstallResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SendFakturaFil_2020Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<swsg_regnskap_trigger_flyttingResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Vareinfo_FasteDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Vareinfo_VedlikeholdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<varetellingImportFilerResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<varetellingImportFiler_VTFILER_RCResult>().HasNoKey().ToView(null);
        }
    }

    public partial class SWNDistroProcedures : ISWNDistroProcedures
    {
        private readonly SWNDistroContext _context;

        public SWNDistroProcedures(SWNDistroContext context)
        {
            _context = context;
        }

        public virtual async Task<List<beregnetLagerResult>> beregnetLagerAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<beregnetLagerResult>("EXEC @returnValue = [dbo].[beregnetLager]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<beregnlagerResult>> beregnlagerAsync(DateTime? dato, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dato",
                    Value = dato ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallDateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<beregnlagerResult>("EXEC @returnValue = [dbo].[beregnlager] @dato", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<FilExport_Distro_2020Result>> FilExport_Distro_2020Async(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<FilExport_Distro_2020Result>("EXEC @returnValue = [dbo].[FilExport_Distro_2020]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<FilExport_Distro_2020_EnkeltOrdreResult>> FilExport_Distro_2020_EnkeltOrdreAsync(string ordreRef, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ordreRef",
                    Size = 50,
                    Value = ordreRef ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<FilExport_Distro_2020_EnkeltOrdreResult>("EXEC @returnValue = [dbo].[FilExport_Distro_2020_EnkeltOrdre] @ordreRef", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<hentButikkOrdreResult>> hentButikkOrdreAsync(int? butikknr, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "butikknr",
                    Value = butikknr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<hentButikkOrdreResult>("EXEC @returnValue = [dbo].[hentButikkOrdre] @butikknr", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<hentVaretellingsDifferResult>> hentVaretellingsDifferAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<hentVaretellingsDifferResult>("EXEC @returnValue = [dbo].[hentVaretellingsDiffer]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ImportLagerResult>> ImportLagerAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ImportLagerResult>("EXEC @returnValue = [dbo].[ImportLager]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ImportPakkseddelResult>> ImportPakkseddelAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ImportPakkseddelResult>("EXEC @returnValue = [dbo].[ImportPakkseddel]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ImportSalgstallResult>> ImportSalgstallAsync(string filnavn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "filnavn",
                    Size = 50,
                    Value = filnavn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ImportSalgstallResult>("EXEC @returnValue = [dbo].[ImportSalgstall] @filnavn", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<lagerberegningResult>> lagerberegningAsync(int? butikknr, int? periodeRC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "butikknr",
                    Value = butikknr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "periodeRC",
                    Value = periodeRC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<lagerberegningResult>("EXEC @returnValue = [dbo].[lagerberegning] @butikknr, @periodeRC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<LagerstatusResult>> LagerstatusAsync(DateTime? datoNaa, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "datoNaa",
                    Value = datoNaa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallDateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<LagerstatusResult>("EXEC @returnValue = [dbo].[Lagerstatus] @datoNaa", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> leggtilnyevarerAsync(string varenrlev, string eankode, string beskrivelse, decimal? innprisCS, decimal? innprisRC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "varenrlev",
                    Size = 50,
                    Value = varenrlev ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "eankode",
                    Size = 15,
                    Value = eankode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "beskrivelse",
                    Size = 50,
                    Value = beskrivelse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "innprisCS",
                    Precision = 19,
                    Scale = 4,
                    Value = innprisCS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "innprisRC",
                    Precision = 19,
                    Scale = 4,
                    Value = innprisRC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[leggtilnyevarer] @varenrlev, @eankode, @beskrivelse, @innprisCS, @innprisRC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<LeggtilNyOrdreResult>> LeggtilNyOrdreAsync(int? butikknr, int? vareID, int? antall, string ordreID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "butikknr",
                    Value = butikknr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "vareID",
                    Value = vareID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "antall",
                    Value = antall ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ordreID",
                    Size = 50,
                    Value = ordreID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<LeggtilNyOrdreResult>("EXEC @returnValue = [dbo].[LeggtilNyOrdre] @butikknr, @vareID, @antall, @ordreID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> leggtilNyttKundenrAsync(int? butikknr, int? kundenr, DateTime? datofra, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "butikknr",
                    Value = butikknr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "kundenr",
                    Value = kundenr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "datofra",
                    Value = datofra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallDateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[leggtilNyttKundenr] @butikknr, @kundenr, @datofra", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<LesInnOrdrefilerFraButikkResult>> LesInnOrdrefilerFraButikkAsync(string filnavn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "filnavn",
                    Size = 100,
                    Value = filnavn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<LesInnOrdrefilerFraButikkResult>("EXEC @returnValue = [dbo].[LesInnOrdrefilerFraButikk] @filnavn", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<oppdaterLagerdataResult>> oppdaterLagerdataAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<oppdaterLagerdataResult>("EXEC @returnValue = [dbo].[oppdaterLagerdata]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> oppdaterLiggendeOrdreAsync(int? id, int? antall, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "antall",
                    Value = antall ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[oppdaterLiggendeOrdre] @id, @antall", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ordreFordelingÅpningsordreResult>> ordreFordelingÅpningsordreAsync(int? butikknr, string varenrLev, int? antall, string ordreRef, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "butikknr",
                    Value = butikknr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "varenrLev",
                    Size = 50,
                    Value = varenrLev ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "antall",
                    Value = antall ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ordreRef",
                    Size = 50,
                    Value = ordreRef ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ordreFordelingÅpningsordreResult>("EXEC @returnValue = [dbo].[ordreFordelingÅpningsordre] @butikknr, @varenrLev, @antall, @ordreRef", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ordreFraNettButikkResult>> ordreFraNettButikkAsync(bool? direkteOrdre, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "direkteOrdre",
                    Value = direkteOrdre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ordreFraNettButikkResult>("EXEC @returnValue = [dbo].[ordreFraNettButikk] @direkteOrdre", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ordreFraNettRCResult>> ordreFraNettRCAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ordreFraNettRCResult>("EXEC @returnValue = [dbo].[ordreFraNettRC]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ordreFraNettRC_NYResult>> ordreFraNettRC_NYAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ordreFraNettRC_NYResult>("EXEC @returnValue = [dbo].[ordreFraNettRC_NY]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> proc_login_logAsync(string username, int? moduleID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "username",
                    Size = 100,
                    Value = username ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "moduleID",
                    Value = moduleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[proc_login_log] @username, @moduleID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<proc_restordreResult>> proc_restordreAsync(DateTime? datoFra, DateTime? datoTil, int? butikknr, string butikknavn, string ordreref, string ordreType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "datoFra",
                    Value = datoFra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallDateTime,
                },
                new SqlParameter
                {
                    ParameterName = "datoTil",
                    Value = datoTil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallDateTime,
                },
                new SqlParameter
                {
                    ParameterName = "butikknr",
                    Value = butikknr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "butikknavn",
                    Size = 50,
                    Value = butikknavn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ordreref",
                    Size = 50,
                    Value = ordreref ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ordreType",
                    Size = 50,
                    Value = ordreType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<proc_restordreResult>("EXEC @returnValue = [dbo].[proc_restordre] @datoFra, @datoTil, @butikknr, @butikknavn, @ordreref, @ordreType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<proc_restordre_linjeResult>> proc_restordre_linjeAsync(string ordreref, int? varenr, string varesok, int? butikknr, string butikknavn, string ordreType, bool? visAlleLinjer, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ordreref",
                    Size = 50,
                    Value = ordreref ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "varenr",
                    Value = varenr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "varesok",
                    Size = 50,
                    Value = varesok ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "butikknr",
                    Value = butikknr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "butikknavn",
                    Size = 50,
                    Value = butikknavn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ordreType",
                    Size = 50,
                    Value = ordreType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "visAlleLinjer",
                    Value = visAlleLinjer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<proc_restordre_linjeResult>("EXEC @returnValue = [dbo].[proc_restordre_linje] @ordreref, @varenr, @varesok, @butikknr, @butikknavn, @ordreType, @visAlleLinjer", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<proc_vareinfoResult>> proc_vareinfoAsync(string search, int? varenr, string varenrLev, string ean, bool? utenCSvarenr, byte? aktive, int? vgr1, int? vgr2, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "search",
                    Size = 100,
                    Value = search ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "varenr",
                    Value = varenr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "varenrLev",
                    Size = 20,
                    Value = varenrLev ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ean",
                    Size = 15,
                    Value = ean ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "utenCSvarenr",
                    Value = utenCSvarenr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "aktive",
                    Value = aktive ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "vgr1",
                    Value = vgr1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "vgr2",
                    Value = vgr2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<proc_vareinfoResult>("EXEC @returnValue = [dbo].[proc_vareinfo] @search, @varenr, @varenrLev, @ean, @utenCSvarenr, @aktive, @vgr1, @vgr2", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<rc_salgstallResult>> rc_salgstallAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<rc_salgstallResult>("EXEC @returnValue = [dbo].[rc_salgstall]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReturImportFiler_VTFILER_RCResult>> ReturImportFiler_VTFILER_RCAsync(string filnavn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "filnavn",
                    Size = 50,
                    Value = filnavn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReturImportFiler_VTFILER_RCResult>("EXEC @returnValue = [dbo].[ReturImportFiler_VTFILER_RC] @filnavn", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SalgsprognoseResult>> SalgsprognoseAsync(int? antDagerPeriode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "antDagerPeriode",
                    Value = antDagerPeriode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SalgsprognoseResult>("EXEC @returnValue = [dbo].[Salgsprognose] @antDagerPeriode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<salgstallResult>> salgstallAsync(int? rapptype, DateTime? datoFra, DateTime? datoTil, int? varenr, string varenrLev, string varetekst, bool? bestiltLevert, bool? ikkeLevert, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "rapptype",
                    Value = rapptype ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "datoFra",
                    Value = datoFra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallDateTime,
                },
                new SqlParameter
                {
                    ParameterName = "datoTil",
                    Value = datoTil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallDateTime,
                },
                new SqlParameter
                {
                    ParameterName = "varenr",
                    Value = varenr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "varenrLev",
                    Size = 50,
                    Value = varenrLev ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "varetekst",
                    Size = 100,
                    Value = varetekst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bestiltLevert",
                    Value = bestiltLevert ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "ikkeLevert",
                    Value = ikkeLevert ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<salgstallResult>("EXEC @returnValue = [dbo].[salgstall] @rapptype, @datoFra, @datoTil, @varenr, @varenrLev, @varetekst, @bestiltLevert, @ikkeLevert", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SendFakturaFil_2020Result>> SendFakturaFil_2020Async(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SendFakturaFil_2020Result>("EXEC @returnValue = [dbo].[SendFakturaFil_2020]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<swsg_regnskap_trigger_flyttingResult>> swsg_regnskap_trigger_flyttingAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<swsg_regnskap_trigger_flyttingResult>("EXEC @returnValue = [dbo].[swsg_regnskap_trigger_flytting]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Vareinfo_FasteDataResult>> Vareinfo_FasteDataAsync(int? id, decimal? utpris, decimal? innpris, decimal? NyNetto, decimal? estAndel, decimal? distrPris, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "utpris",
                    Precision = 19,
                    Scale = 4,
                    Value = utpris ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "innpris",
                    Precision = 19,
                    Scale = 4,
                    Value = innpris ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "NyNetto",
                    Precision = 19,
                    Scale = 4,
                    Value = NyNetto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "estAndel",
                    Precision = 19,
                    Scale = 4,
                    Value = estAndel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "distrPris",
                    Precision = 19,
                    Scale = 4,
                    Value = distrPris ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Vareinfo_FasteDataResult>("EXEC @returnValue = [dbo].[Vareinfo_FasteData] @id, @utpris, @innpris, @NyNetto, @estAndel, @distrPris", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> vareinfo_updateAsync(int? id, int? varenr_swsg, string varenr_lev, string ean, string Varebeskrivelse_2, decimal? our_price, decimal? Innpris, decimal? Utpris, decimal? Utpris2, bool? Aktiv, int? vgr1, int? vgr2, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "varenr_swsg",
                    Value = varenr_swsg ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "varenr_lev",
                    Size = 50,
                    Value = varenr_lev ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ean",
                    Size = 15,
                    Value = ean ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Varebeskrivelse_2",
                    Size = 50,
                    Value = Varebeskrivelse_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "our_price",
                    Precision = 19,
                    Scale = 4,
                    Value = our_price ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "Innpris",
                    Precision = 19,
                    Scale = 4,
                    Value = Innpris ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "Utpris",
                    Precision = 19,
                    Scale = 4,
                    Value = Utpris ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "Utpris2",
                    Precision = 19,
                    Scale = 4,
                    Value = Utpris2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "Aktiv",
                    Value = Aktiv ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "vgr1",
                    Value = vgr1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "vgr2",
                    Value = vgr2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[vareinfo_update] @id, @varenr_swsg, @varenr_lev, @ean, @Varebeskrivelse_2, @our_price, @Innpris, @Utpris, @Utpris2, @Aktiv, @vgr1, @vgr2", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Vareinfo_VedlikeholdResult>> Vareinfo_VedlikeholdAsync(int? id, int? varenr_swn, string varenr_prod, string varenrLev, string ean, string varetekst, string sort, bool? aktiv, bool? utvid, bool? la, bool? lo, bool? se, bool? KJ, bool? SY, bool? TB, bool? TO, bool? FL, string productFit, bool? prøve, string bongtekst, string salgsnavn, string linkBilde, string linkforp, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "varenr_swn",
                    Value = varenr_swn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "varenr_prod",
                    Size = 50,
                    Value = varenr_prod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "varenrLev",
                    Size = 50,
                    Value = varenrLev ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ean",
                    Size = 15,
                    Value = ean ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "varetekst",
                    Size = 50,
                    Value = varetekst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sort",
                    Size = 1,
                    Value = sort ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "aktiv",
                    Value = aktiv ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "utvid",
                    Value = utvid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "la",
                    Value = la ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "lo",
                    Value = lo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "se",
                    Value = se ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "KJ",
                    Value = KJ ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "SY",
                    Value = SY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "TB",
                    Value = TB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "TO",
                    Value = TO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "FL",
                    Value = FL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "productFit",
                    Size = 500,
                    Value = productFit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "prøve",
                    Value = prøve ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bongtekst",
                    Size = 30,
                    Value = bongtekst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "salgsnavn",
                    Size = 500,
                    Value = salgsnavn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "linkBilde",
                    Size = 500,
                    Value = linkBilde ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "linkforp",
                    Size = 500,
                    Value = linkforp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Vareinfo_VedlikeholdResult>("EXEC @returnValue = [dbo].[Vareinfo_Vedlikehold] @id, @varenr_swn, @varenr_prod, @varenrLev, @ean, @varetekst, @sort, @aktiv, @utvid, @la, @lo, @se, @KJ, @SY, @TB, @TO, @FL, @productFit, @prøve, @bongtekst, @salgsnavn, @linkBilde, @linkforp", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<varetellingImportFilerResult>> varetellingImportFilerAsync(string filnavn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "filnavn",
                    Size = 50,
                    Value = filnavn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<varetellingImportFilerResult>("EXEC @returnValue = [dbo].[varetellingImportFiler] @filnavn", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<varetellingImportFiler_VTFILER_RCResult>> varetellingImportFiler_VTFILER_RCAsync(string filnavn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "filnavn",
                    Size = 50,
                    Value = filnavn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<varetellingImportFiler_VTFILER_RCResult>("EXEC @returnValue = [dbo].[varetellingImportFiler_VTFILER_RC] @filnavn", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
